 Advantages and challenges of tokenized TEI TEI offers the option to split a text into words/tokens. However, existing tokenized corpora in TEI, such as the TEI version of the BNC corpus, (almost) never really use TEI, but rather are TEI based versions of traditional verticalized texts, without using too much of the TEI markup. When combining full-fledged TEI documents with tokenization, several issues and advantages occur. In this paper, I will discuss the solutions implemented in TEITOK, a TEI based corpus tool, which combines a searchable CWB corpus with editable TEI/XML files. Where in a tokenized set-up, a corpus is defined by one word per line, with optionally some semi-XML annotations, in TEITOK a corpus is defined by the tokens inside the XML document itself, defined by the XPath query //w. The attributes for each token are then read from the token nodes. One set of problems that arises from tokenizing full TEI is that elements such as <hi> can break tokens. These problems can be solved by splitting such elements into segments, where the new elements resulting from this can be explicitly marked as repetitions. This is best illustrated with an example: say we have the following TEI fragment: <hi rend="underlined">some under</hi>lining. Now we would need to tokenize this into two word: <w>some</w> <w>underlining</w>, but the <hi> element gets in the way of doing this. Since we cannot use unary tags for <hi>, nor can we break up the tokens, the only available solution is to break up the <hi> while marking the second one as a repetition of the one before to keep the information that there was in fact only one underlining: <hi rend="underlined"><w>some</w> </hi><w><hi rend="underlined" rpt="1">under</hi>lining</w>. Conceptually, this solution is straightforward, although to tokenize automatically can become complicated. Another set of problems has to do with unary XML elements: the CWB query language is both more powerful, since in CWB all information is related to tokens, meaning searching for tokens is much easier, but relevant information has to be directly connected to tokens. And  TEI does not, for instance, explicitly indicate which page a token belongs to since <pb> are unary elements. However, this is easily overcome in a indexed corpus by attaching each token to the last preceding <pb>. In order to establish which page a token appears on, one uses the XPath query ./preceeding:pb[1] to obtain the <pb/> node, where the page number and other relevant information can be obtained. There are various advantages of tokenized TEI, apart from the primary objective to allow annotating over words. An example is the fact that it voids the need for a @break="no", since word-breaking <lb> are simply those inside a token. And tokens can be associated with several forms, which voids the need for <ex> and <choice>, since alternative forms such as expanded and regularized forms can be modelled over tokens directly. An inline tokenized TEI documents with linguistic annotation can be turned into a fully searchable corpus, and the growing number of corpora of TEITOK show the usefulness of this approach. However, in order to be properly searchable, the teiHeader should be treated as structured information and not merely machine readable data: in order to be able to only search in documents with a certain type of encoding, that type has to be in a fixed-value field, and not just in a textual description in the encodingDesc. 